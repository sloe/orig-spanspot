<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/AdminMaintenance.inc');
GalleryCoreApi::requireOnce('modules/tags/classes/TagsHelper.class');

/**
 * This is a MaintenanceTask that will populate the keywords into the tags
 *
 * @package Tags
 * @subpackage Classes
 * @author Eric Daniel <ehdaniel@gmail.com>
 * @version $Revision: 1060 $
 */
class KeywordsToTags extends MaintenanceTask {

    /**
     * @see MaintenanceTask::getInfo
     */
    function getInfo() {
	global $gallery;

	$info['l10Domain'] = 'modules_tags';
	$info['title'] = $gallery->i18n('Copy my Keywords into the tags');
	$info['description'] = $gallery->i18n(
	    'This task will go throught all the gallery item and copy all of the keywords'.
	    ' into the tags, if the tag exists, it will not be duplicated existing tags'.
	    ' will be kept');
	return $info;
    }

    /**
     * @see MaintenanceTask::run
     */
    function run() {
	global $gallery;
	$templateAdapter =& $gallery->getTemplateAdapter();

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'tags');
	if ($ret) {
	    return $ret;
	}

	$query = 'SELECT [PhotoItem::id] FROM [PhotoItem] ORDER BY [PhotoItem::id]';
	list ($ret, $result) = $gallery->search($query);
	if ($ret) {
	    return $ret;
	}
	$ids = array();
	while ($res = $result->nextResult()) {
	    $ids[] = $res[0];
	}
	$totalItems = count($ids);
	$current = 1;
	$MigratingKeywords = $module->translate('Migrating Keywords into Tags');

	$ret = $templateAdapter->updateProgressBar($MigratingKeywords, 
	    $module->translate(array('text' => 'Item 0 of %d','arg1' => $totalItems)),0);
	if ($ret) {
	    return $ret;
	}

	foreach ($ids as $id){
	    list ($ret, $itemObj) = GalleryCoreApi::loadEntitiesById($id);
	    if ($ret) {
		return $ret;
	    }

	    $item = (array)$itemObj;
	    $itemKeywords = $item['keywords'];

	    if (!empty($itemKeywords)){
		list ($ret, $keywords) = TagsHelper::splitTags($itemKeywords);
		if ($ret) {
		    return $ret;
		}
		foreach ($keywords as $keyword) {
		    $ret = TagsHelper::addNewTag(trim($keyword));
		    if ($ret) {
			return $ret;
		    }
		    $ret = TagsHelper::assignTag($id, trim($keyword));
		    if ($ret) {
			return $ret;
		    }
		}
	    }

	    $ret = $templateAdapter->updateProgressBar($MigratingKeywords,
		$module->translate(array('text' => 'Item %d of %d', 'arg1' => $current,
		'arg2' => $totalItems)), $current / $totalItems);
		if ($ret) {
		    return $ret;
		}
		$current++;
	}
	return array(null, true,
	    array($module->translate('All Keywords Properly Inserted in the Tags')));
    }

    /**
     * @see MaintenanceTask::requiresProgressBar
     */
    function requiresProgressBar() {
	return true;
    }
}
?>
