<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * This view will simply create the tagClasses Table in the Admin Page
 *
 * @package Tags
 * @subpackage UserInterface
 * @author Eric H Daniel <ehdaniel@gmail.com>
 * @version $Revision: 1060 $
 *
 * @todo: Replace this with a page generated by a form post call and remove AJAX/JS
 */
class TagsAdminCallbackView extends GalleryView {

    /**
     * @see GalleryView::isImmediate
     */
    function isImmediate() {
	return true;
    }

    /**
     * @see GalleryView::renderImmediate
     */
    function renderImmediate($status, $error) {
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();

	list ($tagClassValues, $classNumber) = GalleryUtilities::getRequestVariables('tagClassValues',
	    'classNumber');
	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'tags');
	if ($ret){
	    return $ret;
	}

	if (!headers_sent()) {
	    header("Content-type: text/plain; charset=UTF-8");
	}

	$thisUrl = $urlGenerator->generateUrl(array('view' => 'tags.TagsAdminCallback',
	    'tagClassValues' => '__CLASSES__', 'classNumber' => '__CLASSNUM__'), array('useAuthToken' => true));

	print '<tr id="classNumberTR">
	     <th><label for="classNumber">' . 
	     $module->translate('Enter the number of CSS classes wanted') . '</label></th>
	     <td><input id="classNumber" type="text" name="' . 
	     GalleryUtilities::prefixFormVariable('form[classNumber]') . '" value="' . 
	     $classNumber;
	print '" /><a href="javascript:updateTagClassesNumber(\'' . $thisUrl . '\')">' . 
	     $module->translate('Update') . '</a>
	     </td>
	     </tr>';

	$passedCss = explode('&&', html_entity_decode($tagClassValues));

	for ($i = 0; $i < $classNumber; $i++) {
	    $currentCss = array();
	    if (isset($passedCss[$i])) {
		$currentCss = explode('|', $passedCss[$i]);
	    }
	    print '<tr>
		<th><label for="tagClass' . $i . '">' . $module->translate('Tag Class ') . ($i + 1)
		. '</label></th>';
	    print '<td>' . $module->translate('Font Size: ') . '<input id="tagFont' . $i
		. '" type="text" size="4" name="'
		. GalleryUtilities::prefixFormVariable('form[tagCssClass][' . $i . '][font]') 
		. '"}" value="';
	    if (!empty($currentCss)) {
		print $currentCss[0];
	    }
	    print '" /> em - ' . $module->translate('Font Color: ')
		. '<input type="text" size="8" id="colorPicker' . $i . 'field" name="'
		. GalleryUtilities::prefixFormVariable('form[tagCssClass][' . $i . '][color]')
		. '"}" value="';
	    if (!empty($currentCss)) {
		print $currentCss[1];
	    }
	    print '" onchange="relateColor(\'colorPicker' . $i . '\', this.value);" />';
	    print '<a href="javascript:ColorChooserShow(\'colorPicker' . $i . '\');" 
		id="colorPicker' . $i . '" style="padding:5px">'
		. $module->translate('Select') . '</a>';
	    print '<script language="javascript">relateColor(\'colorPicker' . $i . '\');</script>';
	    print '</td></tr>';
	}
	return null;
    }
}
?>
